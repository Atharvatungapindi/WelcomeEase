name: Deploy Next.js to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_PAT }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy using AWS SSM Run Command
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters '{
              "commands": [
                "echo \"===== Starting deployment for ${{ secrets.PROJECT_NAME }} =====\"",
                
                "# Create a helper script that will be executed as ultravoxuser",
                "cat > /tmp/deploy_helper.sh << '\''EOF'\''",
                "#!/bin/bash",
                "set -e",
                "",
                "# Load NVM",
                "export NVM_DIR=\"$HOME/.nvm\"",
                "[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"",
                "",
                "# Verify Node.js",
                "if ! command -v node &> /dev/null; then",
                "  echo \"Installing Node.js with NVM...\"",
                "  nvm install 18",
                "else",
                "  echo \"Using Node.js $(node -v)\"",
                "fi",
                "",
                "# Install PM2 if needed",
                "if ! command -v pm2 &> /dev/null; then",
                "  echo \"Installing PM2...\"",
                "  npm install -g pm2",
                "else",
                "  echo \"Using PM2 $(pm2 -v)\"",
                "fi",
                "",
                "# Install pnpm if needed",
                "if ! command -v pnpm &> /dev/null; then",
                "  echo \"Installing pnpm...\"",
                "  npm install -g pnpm",
                "else",
                "  echo \"Using pnpm $(pnpm --version)\"",
                "fi",
                "",
                "# Deploy the project",
                "cd /data/${{ secrets.PROJECT_NAME }}",
                "echo \"Current directory: $(pwd) as $(whoami)\"",
                "echo \"Node version: $(node -v)\"",
                "echo \"NPM version: $(npm -v)\"",
                "echo \"PM2 version: $(pm2 -v)\"",
                "",
                "echo \"Stash any local changes...\"",
                "git stash",
                "",
                "echo \"Pulling latest code...\"",
                "git pull origin main",
                "",
                "echo \"Installing dependencies...\"",
                "pnpm install",
                "",
                "echo \"Building project...\"",
                "pnpm build",
                "",
                "echo \"Restarting service...\"",
                "pm2 stop ${{ secrets.PROJECT_NAME }} || echo \"Note: Process was not running (this is fine)\"",
                "pm2 delete ${{ secrets.PROJECT_NAME }} || echo \"Note: Process did not exist (this is fine)\"",
                "pm2 start \"pnpm start\" --name \"${{ secrets.PROJECT_NAME }}\"",
                "pm2 save",
                "EOF",
                "",
                "# Make the helper script executable",
                "chmod +x /tmp/deploy_helper.sh",
                "",
                "# Run the helper script as the specific user",
                "echo \"Running deployment as ultravoxuser...\"",
                "sudo -i -u ultravoxuser /tmp/deploy_helper.sh",
                "",
                "# Cleanup",
                "rm /tmp/deploy_helper.sh",
                "",
                "echo \"===== Deployment completed successfully! =====\""
              ]
            }' \
            --output text --query "Command.CommandId")
          echo "Deployment command initiated. Command ID: $COMMAND_ID"
          # Wait for command completion
          aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id "${{ secrets.EC2_INSTANCE_ID }}"
          # Get the command output
          aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --output json
      - name: Invalidate CloudFront Distribution
        run: |
          echo "Creating CloudFront invalidation for distribution E2MFO958PNA5FA..."
          # Create invalidation for the specified distribution and path pattern
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id E2MFO958PNA5FA \
            --paths "/*" \
            --output text --query "Invalidation.Id")
          echo "Invalidation initiated. Invalidation ID: $INVALIDATION_ID"
          # Wait for the invalidation to complete (optional, as it can take time)
          echo "Waiting for CloudFront invalidation to complete..."
          aws cloudfront wait invalidation-completed \
            --distribution-id E2MFO958PNA5FA \
            --id "$INVALIDATION_ID"
          echo "CloudFront invalidation completed successfully!"
